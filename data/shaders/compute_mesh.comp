/* */
#version 440

// The compute shader outputs vertex data into the buffer filling the VertexData
// structure per each vertex:

layout (local_size_x = 2, local_size_y = 1, local_size_z = 1) in;

#include <data/shaders/mesh_common.inc>

layout (binding = 0) buffer VertexBuffer {
	VertexData vertices[];
} vbo;

// correspond to the MeshUniformBuffer structure 
layout (binding = 1) uniform UniformBuffer
{
	float time;
	uint  numU;
	uint  numV;
	float minU, maxU;
	float minV, maxV;
	uint P1, P2;
	uint Q1, Q2;
	float morph;
} ubo;


VertexData torusKnot(vec2 uv, vec2 pq)
{
	const float p = pq.x; // float(ubo.P);
	const float q = pq.y; // float(ubo.Q);

	// Feel free to play with the baseRadius, segmentRadius, and tubeRadius value
	const float baseRadius    = 5.0;
	const float segmentRadius = 3.0;
	const float tubeRadius    = 0.5;

	float ct = cos( uv.x );
	float st = sin( uv.x );

	float qp = q / p;
	float qps = qp * segmentRadius;

	float arg = uv.x * qp;
	float sqp = sin( arg );
	float cqp = cos( arg );

	float BSQP = baseRadius + segmentRadius * cqp;

	float dxdt = -qps * sqp * ct - st * BSQP;
	float dydt = -qps * sqp * st + ct * BSQP;
	float dzdt =  qps * cqp;

	vec3 r    = vec3(BSQP * ct, BSQP * st, segmentRadius * sqp);
	vec3 drdt = vec3(dxdt, dydt, dzdt);

	vec3 v1 = normalize(cross(r, drdt));
	vec3 v2 = normalize(cross(v1, drdt));

	float cv = cos( uv.y );
	float sv = sin( uv.y );

	VertexData res;
	res.pos = vec4(r + tubeRadius * ( v1 * sv + v2 * cv ), 1);
	res.norm = vec4(cross(v1 * cv - v2 * sv, drdt ), 0);
	return res;
}

// pre-transform them to make the mesh look like it is rotating
mat3 rotY(float angle)
{
	float c = cos(angle), s = sin(angle);
	return mat3(c, 0, -s, 0, 1, 0, s, 0, c);
}

mat3 rotZ(float angle)
{
	float c = cos(angle), s = sin(angle);
	return mat3(c, -s, 0, s, c, 0, 0, 0, 1);
}

// the only interesting thing worth mentioning here is the real-time
// morphing that blends two torus knots with different P and Q parameters. This is pretty
// easy because the total number of vertices always remains the same. 
void main()
{
	// the two sets of UV coordinates for parametrization need to be computed:
	uint index = gl_GlobalInvocationID.x;

	vec2 numUV = vec2(ubo.numU, ubo.numV);
	vec2 ij = vec2(float(index / ubo.numU), float(index % ubo.numU));

	const vec2 maxUV1 = 2.0 * 3.141592653 * vec2(ubo.P1, 1.0);
	vec2 uv1 = ij * maxUV1 / (numUV - vec2(1));

	const vec2 maxUV2 = 2.0 * 3.141592653 * vec2(ubo.P2, 1.0);
	vec2 uv2 = ij * maxUV2 / (numUV - vec2(1));

	// Compute the model matrix for our mesh by combining two rotation matrices:
	mat3 modelMatrix = rotY(0.5 * ubo.time) * rotZ(0.5 * ubo.time);

	// Compute two vertex positions for two different torus knots:
	VertexData v1 = torusKnot(uv1, vec2(ubo.P1, ubo.Q1));
	VertexData v2 = torusKnot(uv2, vec2(ubo.P2, ubo.Q2));

	// Do a linear blend between them using the ubo.morph coefficient. We need to
	// blend only the position and the normal vector:
	vec3 pos = mix(v1.pos.xyz, v2.pos.xyz, ubo.morph);
	vec3 norm = mix(v1.norm.xyz, v2.norm.xyz, ubo.morph);

	// Fill in the resulting VertexData structure and store it in the output buffer:
	VertexData vtx;
	vtx.pos  = vec4(modelMatrix * pos, 1);
	vtx.tc   = vec4(ij / numUV, 0, 0);
	vtx.norm = vec4(modelMatrix * norm, 0);

	vbo.vertices[index] = vtx;
}
